{"version":3,"sources":["model/Minefield.ts","components/Square.tsx","components/Grid.tsx","components/Timer.tsx","components/NewGameForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Minefield","height","width","numMines","field","squaresRevealed","flagSquare","xCoord","yCoord","currentSquare","isRevealed","isFlagged","this","Array","i","generateField","intializeField","initializeMines","initializeSquares","j","label","m","x","randomIntegerBetween","y","numAdjacents","left","right","down","up","toString","revealSquare","min","max","Math","floor","random","source","Square","props","style","background","disabled","isDisabled","className","onClick","onContextMenu","e","preventDefault","Grid","gridOfSquares","mineField","map","row","squareInfo","flagGridSquare","revealGridSquare","status","Timer","minutes","secondsElapsed","seconds","minutesDisplay","length","secondsDisplay","NewGameForm","useState","numHorizontal","setNumHorizontal","numVertical","setNumVertical","setNumMines","htmlFor","id","onChange","console","log","target","value","parseInt","defaultValue","newSettings","updateGame","App","setMineField","isGameOver","setIsGameOver","setStatus","elapsedTime","setElapsedTime","updateTimer","setTimeout","clearTimeout","endGame","newMineField","copyMineField","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0002c889.chunk.js","sourcesContent":["interface SquareInfo {\n    label: String,\n    isRevealed: boolean,\n    isFlagged: boolean,\n    xCoord: number,\n    yCoord: number\n}\n\nclass Minefield {\n    height: number;\n    width: number;\n    numMines: number;\n    field: Array< Array<SquareInfo> >;\n    squaresRevealed: number = 0;        // the number of squares that have been revealed\n\n    /**\n     * A minefield is a grid of squares\n     * @param height the number of rows in the grid\n     * @param width the number of columns in the grid\n     * @param numMines the number of mines in the grid\n     */\n    constructor(height: number, width: number, numMines: number) {\n        this.height = height;\n        this.width = width;\n        this.numMines = numMines;\n\n        this.field = new Array< Array<SquareInfo> >(height);\n        for (let i = 0; i < height; i++) {\n            this.field[i] = new Array<SquareInfo>(width);\n        }\n        \n        this.generateField();\n    }\n\n    /**\n     * Creates the MineField\n     **/ \n    generateField() {\n        this.intializeField();\n        this.initializeMines();\n        this.initializeSquares();\n    }\n\n    /**\n     * Fills the field with null values in the shape (height, width)\n     */\n    intializeField() {\n\n        for (let i = 0; i < this.height; i++) {\n            for (let j = 0; j < this.width; j++) {\n                this.field[i][j] = {label: \"_\", isRevealed: false, isFlagged: false, xCoord: j, yCoord: i};\n            }\n        }\n    }\n\n    /**\n     * Populates the field with numMines mines randomly scattered around\n     */\n    initializeMines() {\n        let m: number = this.numMines;\n\n        while (m !== 0) {\n            let x: number = this.randomIntegerBetween(0, this.width);\n            let y: number = this.randomIntegerBetween(0, this.height);\n\n            if (this.field[y][x].label === \"*\") {\n                // this grid space is already occupied by a mine\n                continue;\n            }\n\n            this.field[y][x].label = \"*\";\n            m--;\n        }\n    }\n\n    /**\n     * For each square, record the number of mines that are adjacent to it\n     */ \n    initializeSquares() {\n        for (let i = 0; i < this.height; i++) {\n            for (let j = 0; j < this.width; j++) {\n                if (this.field[i][j].label === \"*\") {\n                    continue;\n                }\n\n                let numAdjacents: number = 0;       // the number of adjacent mines\n\n                let left: number = j - 1;\n                let right: number = j + 1;\n                let down: number = i + 1;\n                let up: number = i - 1;\n\n                if (left >= 0) {                         // left\n                    if (this.field[i][left].label === \"*\") {\n                        numAdjacents++;\n                    }\n                }\n                if (left >= 0 && up >= 0) {               // upper left\n                    if (this.field[up][left].label === \"*\") {\n                        numAdjacents++;\n                    }\n                }\n                if (up >= 0) {                           // up\n                    if (this.field[up][j].label === \"*\") {\n                        numAdjacents++;\n                    }\n                }\n                if (up >= 0 && right < this.width) {    // upper-right\n                    if (this.field[up][right].label === \"*\") {\n                        numAdjacents++;\n                    }\n                }\n                if (right < this.width) {               // right\n                    if (this.field[i][right].label === \"*\") {\n                        numAdjacents++;\n                    }\n                }\n                if (down < this.height && right < this.width) { // lower-right\n                    if (this.field[down][right].label === \"*\") {\n                        numAdjacents++;\n                    }\n                }\n                if (down < this.height) {               // down\n                    if (this.field[down][j].label === \"*\") {\n                        numAdjacents++;\n                    }\n                }\n                if (down < this.height && left >= 0) {           // lower-left\n                    if (this.field[down][left].label === \"*\") {\n                        numAdjacents++;\n                    }\n                }\n\n                if (numAdjacents !== 0) {\n                    this.field[i][j].label = numAdjacents.toString();\n                } else {\n                    this.field[i][j].label = \"\";\n                }\n                \n                \n            }\n        }\n    }\n\n    revealSquare(xCoord: number, yCoord: number) {\n        if (xCoord < 0 || xCoord >= this.width || yCoord <0 || yCoord >= this.height) {\n            return;     // invalid coordinates\n        }\n\n        let currentSquare: SquareInfo = this.field[yCoord][xCoord];\n        if (currentSquare.isRevealed) {\n            return;\n        }\n\n        if (currentSquare.isFlagged) {\n            return;\n        }\n\n        if (currentSquare.label !== \"\") {\n            // the current square is not empty\n            currentSquare.isRevealed = true;\n            this.squaresRevealed++;\n            return;\n        }\n\n        // otherwise the current square is empty\n        // recursively reveal all adjacent empty squares\n        currentSquare.isRevealed = true;\n        this.squaresRevealed++;\n        this.revealSquare(xCoord-1, yCoord);    // left\n        this.revealSquare(xCoord-1, yCoord-1)   // up-left\n        this.revealSquare(xCoord, yCoord-1);    // up\n        this.revealSquare(xCoord+1, yCoord-1);  // up-right\n        this.revealSquare(xCoord+1, yCoord);    // right\n        this.revealSquare(xCoord+1, yCoord+1);  // down-right\n        this.revealSquare(xCoord, yCoord+1);    // down\n        this.revealSquare(xCoord-1, yCoord+1);  // down-left\n    }\n\n    flagSquare = (xCoord: number, yCoord: number) => {\n        if (xCoord < 0 || xCoord >= this.width || yCoord <0 || yCoord >= this.height) {\n            return;     // invalid coordinates\n        }\n\n        let currentSquare: SquareInfo = this.field[yCoord][xCoord];\n        if (currentSquare.isRevealed) {\n            return;\n        }\n\n        currentSquare.isFlagged = !currentSquare.isFlagged;\n    }\n\n    /**\n     * @param min : the random integer is greater than or equal to min\n     * @param max : the random integer is smaller than max\n     * @returns : random integer in the range [min, max)\n     */\n    randomIntegerBetween(min: number, max: number): number {\n        return Math.floor(Math.random() * (max - min) + min);\n    }\n\n    copyMineField(source: Minefield) {\n        this.height = source.height;\n        this.width = source.width;\n        this.numMines = source.numMines;\n        this.field = source.field;\n        this.squaresRevealed = source.squaresRevealed;\n    }\n}\n\nexport default Minefield;","import React from 'react';\n\n/**\n * A square on a minesweeper board\n * @param props : props.label is the label of the square\n *                props.isRevealed is a boolean that determines whether or the square's label should be revealed\n *                props.isFlagged is a boolean that determines if this square is flagged\n *                props.xCoord is the x coordinate of the square in the grid\n *                props.yCoord is the y coordinate of the square in the grid\n *                props.revealSquare is a function that is called when the user clicks on a square\n *                props.flagSquare is a function that is called when the user right clicks on a square\n *                props.isDisabled is a boolean that indicates if the component is disabled\n *                \n */\nlet Square = (props: any) => {\n\n    let isRevealed = props.isRevealed;\n    let isFlagged = props.isFlagged;\n    let xCoord = props.xCoord;\n    let yCoord = props.yCoord;\n\n\n    // place a flag on the square when the user right clicks on it\n    // if already flagged, then remove the flag on right click\n    let flagSquare = (e: any) => {\n        e.preventDefault();\n        props.flagSquare(xCoord, yCoord);\n    }\n\n    // will try to reveal the square\n    // if the square is flagged then nothing can happen\n    let attemptToRevealSquare = () => {\n        if (!isFlagged) {\n            props.revealSquare(xCoord, yCoord);\n        }\n    }\n\n    let label: String;\n    if (isRevealed) {\n        label = props.label;\n    } else if (isFlagged) {\n        label = \"🇨🇦\";\n    }else {\n        label = \"\";\n    }\n\n    // update the background color of squares which have been revealed\n    let style;\n    if (isRevealed && props.label === \"*\") {    // paint the square red if it contains a mine\n        style = {\n            background: \"red\"\n        }\n    } else if (isRevealed) {\n        style = {\n            background: \"grey\"\n        };\n    } else {\n        style = {};\n    }\n\n    return (\n        <button disabled={props.isDisabled} className=\"square\" \n                style={style} onClick={attemptToRevealSquare} onContextMenu={flagSquare}>\n            {label}\n        </button>\n    )\n}\n\nexport default Square;","import React from 'react'\nimport Square from './Square'\n\n/**\n * props.mineField will contain an instance of a minesweeper field\n * props.isDisabled is a boolean that disables the component\n * props.revealGridSquare is a function that is called when the user clicks on a square\n * props.flagGridSquare is a function that is called when the user right clicks on a square\n * props.status is text that is displayed when the game is either won or loss\n */\nlet Grid = (props: any) => {\n\n    let gridOfSquares = props.mineField.field.map((row: Array<any>) => {  \n        return (\n            <div className=\"grid-row\">\n                {\n                    row.map((squareInfo: any) => {\n                        return (\n                            <Square label={squareInfo.label} isRevealed={squareInfo.isRevealed}\n                                    isFlagged={squareInfo.isFlagged} flagSquare={props.flagGridSquare}\n                                    xCoord={squareInfo.xCoord} yCoord={squareInfo.yCoord}\n                                    revealSquare={props.revealGridSquare} isDisabled={props.isDisabled}/>\n                        );\n                    })\n                }   \n            </div>\n        )\n    })\n    return (\n        <div>\n            {gridOfSquares}\n            <p>{props.isDisabled ? props.status : \"\"}</p>\n        </div>\n    )\n}\n\nexport default Grid;","import React from 'react'\n\n/**\n * \n * @param props : props.secondsElapsed is the number of seconds since the game started\n *                \n */\nlet Timer = (props: any) => {\n\n    let minutes: number = Math.floor(props.secondsElapsed / 60);\n    let seconds: number = props.secondsElapsed % 60;\n\n    let minutesDisplay: string = minutes.toString();\n    if (minutesDisplay.length === 1) {\n        minutesDisplay = \"0\" + minutesDisplay;\n    }\n\n    let secondsDisplay: string = seconds.toString();\n    if (secondsDisplay.length === 1) {\n        secondsDisplay = \"0\" + secondsDisplay;\n    }\n\n    return (\n        <div>\n            Time: {minutesDisplay}:{secondsDisplay}\n        </div>\n    )\n}\n\nexport default Timer;","import React, { useState } from 'react';\n\n/**\n * @param props : props.updateGame is a function that sets the state in the game\n * @returns \n */\nlet NewGameForm = (props: any) => {\n\n    // // Difficulty selections - gives specific height, width and mine amount\n    // let BEGINNER: [number, number, number] = [9, 9, 10];\n    // let INTERMEDIATE: [number, number, number] = [16, 16, 40];\n    // let EXPERT: [number, number, number] = [16, 30, 99];\n\n    // STATE: Variables which store the various input parameters\n    let [numHorizontal, setNumHorizontal] = useState(9);\n    let [numVertical, setNumVertical] = useState(9);\n    let [numMines, setNumMines] = useState(10);\n\n    // the following functions are called when one of the inputs changes\n    let updateHorizontal = (e : React.ChangeEvent<HTMLInputElement>) => {\n        console.log(e.target.value);\n        setNumHorizontal(parseInt(e.target.value));\n    }\n    let updateVertical = (e : React.ChangeEvent<HTMLInputElement>) => {\n        setNumVertical(parseInt(e.target.value));\n    }\n    let updateNumMines = (e : React.ChangeEvent<HTMLInputElement>) => {\n        setNumMines(parseInt(e.target.value));\n    }\n\n    let startNewGame = (e : any) => {\n        e.preventDefault();\n        // console.log(`${numHorizontal}, ${numVertical}, ${numMines}`)\n        let newSettings = [numHorizontal, numVertical, numMines];\n        props.updateGame(newSettings)\n    }\n    \n    return (\n        <form>\n            <label htmlFor=\"horizontal\">Horizontal Squares: </label>\n            <input id=\"horizontal\" onChange={updateHorizontal} defaultValue={numHorizontal}></input>\n            <label htmlFor=\"vertical\">Vertical Squares: </label>\n            <input id=\"vertical\" onChange={updateVertical} defaultValue={numVertical}></input>\n            <label htmlFor=\"num-mines\">Number of Mines: </label>\n            <input id=\"num-mines\" onChange={updateNumMines} defaultValue={numMines}></input>\n            <br></br>\n            <button onClick={startNewGame}>New Game</button>\n        </form>\n    )\n}\n\nexport default NewGameForm;","// Default React imports\nimport React, {useState} from 'react';\nimport './App.css';\n\n// Other imports\nimport Minefield from \"./model/Minefield\";\nimport Grid from './components/Grid';\nimport Timer from './components/Timer';\nimport NewGameForm from './components/NewGameForm';\n\n\nfunction App() {\n\n  // STATE: Stores the minefield for a game of minesweeper\n  let [mineField, setMineField] = useState(new Minefield(9, 9, 10));\n\n  // STATE: Whether or not the game is over\n  let [isGameOver, setIsGameOver] = useState(false);\n\n  // STATE: string representing the status of the game (win/lose)\n  let [status, setStatus] = useState(\"\");\n\n  // STATE: the amount of seconds since the current game started\n  let [elapsedTime, setElapsedTime] = useState(0);\n\n  // update the elapsedTime - add one second each second\n  let updateTimer = setTimeout(() => {\n    setElapsedTime(elapsedTime + 1);\n  }, 1000);\n\n  if (isGameOver) {\n    clearTimeout(updateTimer);\n  }\n\n  /* \n    Reveals the square at [xCoord, yCoord]\n  */\n  let revealGridSquare = (xCoord: number, yCoord: number) => {\n        \n    // if the user clicked on a square with a mine, then it's game over\n    if (mineField.field[yCoord][xCoord].label === \"*\") {\n        setStatus(\"You lost\");\n        endGame();\n    }\n\n    // copy the minefield\n    let newMineField: Minefield = new Minefield(mineField.height, mineField.width, mineField.numMines);\n    newMineField.copyMineField(mineField);\n\n    // update the minefield\n    newMineField.revealSquare(xCoord, yCoord);\n\n    // Check win condition\n    if (newMineField.squaresRevealed === (newMineField.height * newMineField.width - newMineField.numMines)) {\n        // console.log(\"Winner winner chicken dinner\");\n        setStatus(\"You won\");\n        endGame();\n    }\n\n    // update the state\n    setMineField(newMineField);\n  } \n\n  /*\n    Flags the square at [xCoord, yCoord]\n  */\n  let flagGridSquare = (xCoord: number, yCoord: number) => {\n\n    // copy the minefield\n    let newMineField: Minefield = new Minefield(mineField.height, mineField.width, mineField.numMines);\n    newMineField.copyMineField(mineField);\n\n    // update the minefield\n    newMineField.flagSquare(xCoord, yCoord);\n\n    // update the state\n    setMineField(newMineField);\n  } \n\n  /* \n    Ends the game\n  */\n  let endGame = () => {\n    // console.log(\"Game over\");\n    setIsGameOver(true);\n  }\n\n  /*\n    Starts a new game according to user input\n  */\n  let startNewGame = (newSettings: [number, number, number]) => {\n    // console.log(\"starting new game...\")\n    setMineField(new Minefield(newSettings[1], newSettings[0], newSettings[2]));\n    setElapsedTime(0);\n    setIsGameOver(false);\n  }\n\n  return (\n    <div className=\"App\">\n      <Timer secondsElapsed={elapsedTime}/>\n      <Grid isDisabled={isGameOver} mineField={mineField} revealGridSquare={revealGridSquare}\n            flagGridSquare={flagGridSquare} status={status}/>\n      <NewGameForm updateGame={startNewGame}/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}